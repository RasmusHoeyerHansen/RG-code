//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Rasmus/source/repos/RG-code/RG-code\RGCode.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class RGCodeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, BoolOperator=20, Typeword=21, BooleanValue=22, ScopeStart=23, 
		ScopeEnd=24, Mul_Div=25, Plus_Minus=26, WS=27, Number=28, ID=29, COMMENT=30;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_vardec = 2, RULE_assignment = 3, 
		RULE_expr = 4, RULE_math = 5, RULE_term = 6, RULE_factor = 7, RULE_atom = 8, 
		RULE_bool = 9, RULE_point = 10, RULE_move = 11, RULE_line = 12, RULE_curve = 13, 
		RULE_toCommands = 14, RULE_repeat = 15, RULE_if = 16, RULE_ifElse = 17;
	public static readonly string[] ruleNames = {
		"program", "statement", "vardec", "assignment", "expr", "math", "term", 
		"factor", "atom", "bool", "point", "move", "line", "curve", "toCommands", 
		"repeat", "if", "ifElse"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'+'", "'-'", "'*'", "'/'", "'^'", "'('", "')'", "','", 
		"'line from'", "'curve from'", "'with angle'", "'to '", "'repeat'", "'until'", 
		"'iff'", "'then'", "'else do'", null, null, null, "'begin'", "'end'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "BoolOperator", "Typeword", 
		"BooleanValue", "ScopeStart", "ScopeEnd", "Mul_Div", "Plus_Minus", "WS", 
		"Number", "ID", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RGCode.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RGCodeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RGCodeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RGCodeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RGCodeParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 36;
				statement();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__14) | (1L << T__16) | (1L << Typeword) | (1L << ID))) != 0) );
			State = 41;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardecContext vardec() {
			return GetRuleContext<VardecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveContext move() {
			return GetRuleContext<MoveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfElseContext ifElse() {
			return GetRuleContext<IfElseContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 43;
				assignment();
				}
				break;
			case 2:
				{
				State = 44;
				vardec();
				}
				break;
			case 3:
				{
				State = 45;
				move();
				}
				break;
			case 4:
				{
				State = 46;
				repeat();
				}
				break;
			case 5:
				{
				State = 47;
				@if();
				}
				break;
			case 6:
				{
				State = 48;
				ifElse();
				}
				break;
			}
			State = 51;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardecContext : ParserRuleContext {
		public IToken typeWord;
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeword() { return GetToken(RGCodeParser.Typeword, 0); }
		public VardecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterVardec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitVardec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardecContext vardec() {
		VardecContext _localctx = new VardecContext(Context, State);
		EnterRule(_localctx, 4, RULE_vardec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_localctx.typeWord = Match(Typeword);
			State = 54;
			assignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RGCodeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(ID);
			State = 57;
			Match(T__1);
			State = 58;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math() {
			return GetRuleContext<MathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointContext point() {
			return GetRuleContext<PointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RGCodeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 60;
				math();
				}
				break;
			case 2:
				{
				State = 61;
				point();
				}
				break;
			case 3:
				{
				State = 62;
				Match(ID);
				}
				break;
			case 4:
				{
				State = 63;
				@bool();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathContext : ParserRuleContext {
		public MathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math; } }
	 
		public MathContext() { }
		public virtual void CopyFrom(MathContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SingleTermContext : MathContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public SingleTermContext(MathContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterSingleTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitSingleTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusminusContext : MathContext {
		public TermContext lhs;
		public IToken op;
		public MathContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math() {
			return GetRuleContext<MathContext>(0);
		}
		public PlusminusContext(MathContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterPlusminus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitPlusminus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusminus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathContext math() {
		MathContext _localctx = new MathContext(Context, State);
		EnterRule(_localctx, 10, RULE_math);
		int _la;
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new PlusminusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				((PlusminusContext)_localctx).lhs = term();
				State = 67;
				((PlusminusContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__2 || _la==T__3) ) {
					((PlusminusContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 68;
				((PlusminusContext)_localctx).rhs = math();
				}
				break;
			case 2:
				_localctx = new SingleTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 70;
				term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SingleFactorContext : TermContext {
		public FactorContext child;
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public SingleFactorContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterSingleFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitSingleFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationContext : TermContext {
		public FactorContext lhs;
		public IToken op;
		public TermContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public MultiplicationContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 12, RULE_term);
		int _la;
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new MultiplicationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 73;
				((MultiplicationContext)_localctx).lhs = factor();
				State = 74;
				((MultiplicationContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__5) ) {
					((MultiplicationContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 75;
				((MultiplicationContext)_localctx).rhs = term();
				}
				break;
			case 2:
				_localctx = new SingleFactorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 77;
				((SingleFactorContext)_localctx).child = factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParentheseisContext : FactorContext {
		public MathContext mathExpr;
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math() {
			return GetRuleContext<MathContext>(0);
		}
		public ParentheseisContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterParentheseis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitParentheseis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentheseis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerContext : FactorContext {
		public IToken pow;
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PowerContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingeAtomContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public SingeAtomContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterSingeAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitSingeAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingeAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 14, RULE_factor);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new PowerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				atom();
				State = 81;
				((PowerContext)_localctx).pow = Match(T__6);
				State = 82;
				factor();
				}
				break;
			case 2:
				_localctx = new SingeAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				atom();
				}
				break;
			case 3:
				_localctx = new ParentheseisContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 85;
				Match(T__7);
				State = 86;
				((ParentheseisContext)_localctx).mathExpr = math();
				State = 87;
				Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdMathContext : AtomContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RGCodeParser.ID, 0); }
		public IdMathContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterIdMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitIdMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdMath(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueContext : AtomContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(RGCodeParser.Number, 0); }
		public ValueContext(AtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 16, RULE_atom);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				_localctx = new ValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 91;
				((ValueContext)_localctx).value = Match(Number);
				}
				break;
			case ID:
				_localctx = new IdMathContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 92;
				((IdMathContext)_localctx).value = Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
	 
		public BoolContext() { }
		public virtual void CopyFrom(BoolContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolExpressionContext : BoolContext {
		public MathContext lhs;
		public IToken @operator;
		public MathContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public MathContext[] math() {
			return GetRuleContexts<MathContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math(int i) {
			return GetRuleContext<MathContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolOperator() { return GetToken(RGCodeParser.BoolOperator, 0); }
		public BoolExpressionContext(BoolContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 18, RULE_bool);
		try {
			_localctx = new BoolExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			((BoolExpressionContext)_localctx).lhs = math();
			State = 96;
			((BoolExpressionContext)_localctx).@operator = Match(BoolOperator);
			State = 97;
			((BoolExpressionContext)_localctx).rhs = math();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointContext : ParserRuleContext {
		public PointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_point; } }
	 
		public PointContext() { }
		public virtual void CopyFrom(PointContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PointExpressionContext : PointContext {
		public MathContext lhs;
		public MathContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public MathContext[] math() {
			return GetRuleContexts<MathContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math(int i) {
			return GetRuleContext<MathContext>(i);
		}
		public PointExpressionContext(PointContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterPointExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitPointExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdPointContext : PointContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RGCodeParser.ID, 0); }
		public IdPointContext(PointContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterIdPoint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitIdPoint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointContext point() {
		PointContext _localctx = new PointContext(Context, State);
		EnterRule(_localctx, 20, RULE_point);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				_localctx = new PointExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 99;
				Match(T__7);
				State = 100;
				((PointExpressionContext)_localctx).lhs = math();
				State = 101;
				Match(T__9);
				State = 102;
				((PointExpressionContext)_localctx).rhs = math();
				State = 103;
				Match(T__8);
				}
				break;
			case ID:
				_localctx = new IdPointContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				((IdPointContext)_localctx).value = Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveContext curve() {
			return GetRuleContext<CurveContext>(0);
		}
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 22, RULE_move);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				{
				State = 108;
				line();
				}
				break;
			case T__11:
				{
				State = 109;
				curve();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
	 
		public LineContext() { }
		public virtual void CopyFrom(LineContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LineCommandContext : LineContext {
		public PointContext from;
		[System.Diagnostics.DebuggerNonUserCode] public PointContext point() {
			return GetRuleContext<PointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandsContext[] toCommands() {
			return GetRuleContexts<ToCommandsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandsContext toCommands(int i) {
			return GetRuleContext<ToCommandsContext>(i);
		}
		public LineCommandContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterLineCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitLineCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 24, RULE_line);
		int _la;
		try {
			_localctx = new LineCommandContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(T__10);
			State = 113;
			((LineCommandContext)_localctx).from = point();
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 114;
				toCommands();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__13 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurveContext : ParserRuleContext {
		public CurveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_curve; } }
	 
		public CurveContext() { }
		public virtual void CopyFrom(CurveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CurveCommandContext : CurveContext {
		public PointContext from;
		public MathContext angle;
		[System.Diagnostics.DebuggerNonUserCode] public PointContext point() {
			return GetRuleContext<PointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math() {
			return GetRuleContext<MathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandsContext[] toCommands() {
			return GetRuleContexts<ToCommandsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToCommandsContext toCommands(int i) {
			return GetRuleContext<ToCommandsContext>(i);
		}
		public CurveCommandContext(CurveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterCurveCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitCurveCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurveCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurveContext curve() {
		CurveContext _localctx = new CurveContext(Context, State);
		EnterRule(_localctx, 26, RULE_curve);
		int _la;
		try {
			_localctx = new CurveCommandContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(T__11);
			State = 120;
			((CurveCommandContext)_localctx).from = point();
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 121;
				toCommands();
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__13 );
			State = 126;
			Match(T__12);
			State = 127;
			((CurveCommandContext)_localctx).angle = math();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToCommandsContext : ParserRuleContext {
		public ToCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toCommands; } }
	 
		public ToCommandsContext() { }
		public virtual void CopyFrom(ToCommandsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToContext : ToCommandsContext {
		public PointContext p;
		[System.Diagnostics.DebuggerNonUserCode] public PointContext point() {
			return GetRuleContext<PointContext>(0);
		}
		public ToContext(ToCommandsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterTo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitTo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToCommandsContext toCommands() {
		ToCommandsContext _localctx = new ToCommandsContext(Context, State);
		EnterRule(_localctx, 28, RULE_toCommands);
		try {
			_localctx = new ToContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 129;
			Match(T__13);
			State = 130;
			((ToContext)_localctx).p = point();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		public BoolContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ScopeStart() { return GetToken(RGCodeParser.ScopeStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ScopeEnd() { return GetToken(RGCodeParser.ScopeEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 30, RULE_repeat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(T__14);
			State = 133;
			Match(T__15);
			State = 134;
			_localctx.cond = @bool();
			State = 135;
			Match(ScopeStart);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__14) | (1L << T__16) | (1L << Typeword) | (1L << ID))) != 0)) {
				{
				{
				State = 136;
				statement();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142;
			Match(ScopeEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public BoolContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ScopeStart() { return GetToken(RGCodeParser.ScopeStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ScopeEnd() { return GetToken(RGCodeParser.ScopeEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 32, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(T__16);
			State = 145;
			_localctx.cond = @bool();
			State = 146;
			Match(T__17);
			State = 147;
			Match(ScopeStart);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__14) | (1L << T__16) | (1L << Typeword) | (1L << ID))) != 0)) {
				{
				{
				State = 148;
				statement();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 154;
			Match(ScopeEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ScopeStart() { return GetToken(RGCodeParser.ScopeStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ScopeEnd() { return GetToken(RGCodeParser.ScopeEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.EnterIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRGCodeListener typedListener = listener as IRGCodeListener;
			if (typedListener != null) typedListener.ExitIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRGCodeVisitor<TResult> typedVisitor = visitor as IRGCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseContext ifElse() {
		IfElseContext _localctx = new IfElseContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifElse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			@if();
			State = 157;
			Match(T__18);
			State = 158;
			Match(ScopeStart);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__14) | (1L << T__16) | (1L << Typeword) | (1L << ID))) != 0)) {
				{
				{
				State = 159;
				statement();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 165;
			Match(ScopeEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ' ', '\xAA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x6', '\x2', '(', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', ')', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x34', 
		'\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x43', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', 'J', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', 'Q', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\\', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '`', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'm', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', 'q', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x6', '\xE', 'v', '\n', '\xE', '\r', '\xE', '\xE', 
		'\xE', 'w', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x6', '\xF', '}', 
		'\n', '\xF', '\r', '\xF', '\xE', '\xF', '~', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\x8C', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x8F', '\v', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x98', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\x9B', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', 
		'\xA3', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xA6', '\v', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x2', '\x2', '\x14', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '\x2', '\x4', '\x3', '\x2', 
		'\x5', '\x6', '\x3', '\x2', '\a', '\b', '\x2', '\xAC', '\x2', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x33', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\b', ':', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x42', '\x3', '\x2', '\x2', '\x2', '\f', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'P', '\x3', '\x2', '\x2', '\x2', '\x10', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '_', '\x3', '\x2', '\x2', '\x2', '\x14', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x16', 'l', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'p', '\x3', '\x2', '\x2', '\x2', '\x1A', 'r', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', 'y', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x83', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x86', '\x3', '\x2', '\x2', '\x2', '\"', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x9E', '\x3', '\x2', '\x2', '\x2', '&', '(', 
		'\x5', '\x4', '\x3', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', 
		')', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', 
		')', '*', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\a', '\x2', '\x2', '\x3', ',', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '-', '\x34', '\x5', '\b', '\x5', '\x2', '.', '\x34', '\x5', '\x6', 
		'\x4', '\x2', '/', '\x34', '\x5', '\x18', '\r', '\x2', '\x30', '\x34', 
		'\x5', ' ', '\x11', '\x2', '\x31', '\x34', '\x5', '\"', '\x12', '\x2', 
		'\x32', '\x34', '\x5', '$', '\x13', '\x2', '\x33', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '.', '\x3', '\x2', '\x2', '\x2', '\x33', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x30', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', 
		'\x3', '\x2', '\x2', '\x36', '\x5', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\a', '\x17', '\x2', '\x2', '\x38', '\x39', '\x5', '\b', '\x5', 
		'\x2', '\x39', '\a', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\x1F', 
		'\x2', '\x2', ';', '<', '\a', '\x4', '\x2', '\x2', '<', '=', '\x5', '\n', 
		'\x6', '\x2', '=', '\t', '\x3', '\x2', '\x2', '\x2', '>', '\x43', '\x5', 
		'\f', '\a', '\x2', '?', '\x43', '\x5', '\x16', '\f', '\x2', '@', '\x43', 
		'\a', '\x1F', '\x2', '\x2', '\x41', '\x43', '\x5', '\x14', '\v', '\x2', 
		'\x42', '>', '\x3', '\x2', '\x2', '\x2', '\x42', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\v', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\x5', '\xE', '\b', '\x2', '\x45', '\x46', '\t', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\x5', '\f', '\a', '\x2', 'G', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'J', '\x5', '\xE', '\b', '\x2', 'I', '\x44', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 'J', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x5', '\x10', '\t', '\x2', 'L', 
		'M', '\t', '\x3', '\x2', '\x2', 'M', 'N', '\x5', '\xE', '\b', '\x2', 'N', 
		'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'Q', '\x5', '\x10', '\t', '\x2', 
		'P', 'K', '\x3', '\x2', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', '\xF', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x5', '\x12', '\n', 
		'\x2', 'S', 'T', '\a', '\t', '\x2', '\x2', 'T', 'U', '\x5', '\x10', '\t', 
		'\x2', 'U', '\\', '\x3', '\x2', '\x2', '\x2', 'V', '\\', '\x5', '\x12', 
		'\n', '\x2', 'W', 'X', '\a', '\n', '\x2', '\x2', 'X', 'Y', '\x5', '\f', 
		'\a', '\x2', 'Y', 'Z', '\a', '\v', '\x2', '\x2', 'Z', '\\', '\x3', '\x2', 
		'\x2', '\x2', '[', 'R', '\x3', '\x2', '\x2', '\x2', '[', 'V', '\x3', '\x2', 
		'\x2', '\x2', '[', 'W', '\x3', '\x2', '\x2', '\x2', '\\', '\x11', '\x3', 
		'\x2', '\x2', '\x2', ']', '`', '\a', '\x1E', '\x2', '\x2', '^', '`', '\a', 
		'\x1F', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '^', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x13', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x5', '\f', '\a', '\x2', '\x62', '\x63', '\a', '\x16', '\x2', 
		'\x2', '\x63', '\x64', '\x5', '\f', '\a', '\x2', '\x64', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\n', '\x2', '\x2', '\x66', 
		'g', '\x5', '\f', '\a', '\x2', 'g', 'h', '\a', '\f', '\x2', '\x2', 'h', 
		'i', '\x5', '\f', '\a', '\x2', 'i', 'j', '\a', '\v', '\x2', '\x2', 'j', 
		'm', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\a', '\x1F', '\x2', '\x2', 
		'l', '\x65', '\x3', '\x2', '\x2', '\x2', 'l', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'm', '\x17', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x5', '\x1A', 
		'\xE', '\x2', 'o', 'q', '\x5', '\x1C', '\xF', '\x2', 'p', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 'q', '\x19', 
		'\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\r', '\x2', '\x2', 's', 'u', 
		'\x5', '\x16', '\f', '\x2', 't', 'v', '\x5', '\x1E', '\x10', '\x2', 'u', 
		't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 
		'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x1B', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', '\xE', '\x2', 
		'\x2', 'z', '|', '\x5', '\x16', '\f', '\x2', '{', '}', '\x5', '\x1E', 
		'\x10', '\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', 
		'\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x81', '\a', '\xF', '\x2', '\x2', '\x81', '\x82', '\x5', '\f', 
		'\a', '\x2', '\x82', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', 
		'\a', '\x10', '\x2', '\x2', '\x84', '\x85', '\x5', '\x16', '\f', '\x2', 
		'\x85', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\x11', 
		'\x2', '\x2', '\x87', '\x88', '\a', '\x12', '\x2', '\x2', '\x88', '\x89', 
		'\x5', '\x14', '\v', '\x2', '\x89', '\x8D', '\a', '\x19', '\x2', '\x2', 
		'\x8A', '\x8C', '\x5', '\x4', '\x3', '\x2', '\x8B', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x91', '\a', '\x1A', '\x2', '\x2', '\x91', '!', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\x13', '\x2', '\x2', 
		'\x93', '\x94', '\x5', '\x14', '\v', '\x2', '\x94', '\x95', '\a', '\x14', 
		'\x2', '\x2', '\x95', '\x99', '\a', '\x19', '\x2', '\x2', '\x96', '\x98', 
		'\x5', '\x4', '\x3', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9D', '\a', '\x1A', '\x2', '\x2', '\x9D', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9F', '\x5', '\"', '\x12', '\x2', '\x9F', '\xA0', 
		'\a', '\x15', '\x2', '\x2', '\xA0', '\xA4', '\a', '\x19', '\x2', '\x2', 
		'\xA1', '\xA3', '\x5', '\x4', '\x3', '\x2', '\xA2', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\a', '\x1A', '\x2', '\x2', '\xA8', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x10', ')', '\x33', '\x42', 'I', 'P', '[', 
		'_', 'l', 'p', 'w', '~', '\x8D', '\x99', '\xA4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
